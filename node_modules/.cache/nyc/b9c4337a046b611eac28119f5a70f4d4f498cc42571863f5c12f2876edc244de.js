var cov_1v4wqmvcmv=function(){var path="/home/angel/GA/ecommerce/controllers/userController.js";var hash="c250ab8ccaf6e81960e2bc5135f3a66809a97042";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/home/angel/GA/ecommerce/controllers/userController.js",statementMap:{"0":{start:{line:1,column:13},end:{line:1,column:40}},"1":{start:{line:2,column:34},end:{line:2,column:63}},"2":{start:{line:4,column:10},end:{line:4,column:27}},"3":{start:{line:6,column:15},end:{line:6,column:34}},"4":{start:{line:12,column:15},end:{line:12,column:60}},"5":{start:{line:13,column:4},end:{line:13,column:84}},"6":{start:{line:13,column:14},end:{line:13,column:84}},"7":{start:{line:15,column:4},end:{line:15,column:95}},"8":{start:{line:17,column:19},end:{line:17,column:36}},"9":{start:{line:19,column:4},end:{line:19,column:81}},"10":{start:{line:25,column:14},end:{line:25,column:59}},"11":{start:{line:26,column:3},end:{line:26,column:85}},"12":{start:{line:26,column:14},end:{line:26,column:85}},"13":{start:{line:29,column:25},end:{line:29,column:79}},"14":{start:{line:30,column:3},end:{line:30,column:81}},"15":{start:{line:30,column:22},end:{line:30,column:81}},"16":{start:{line:33,column:17},end:{line:33,column:41}},"17":{start:{line:34,column:3},end:{line:34,column:62}},"18":{start:{line:40,column:19},end:{line:40,column:38}},"19":{start:{line:42,column:4},end:{line:42,column:70}},"20":{start:{line:49,column:24},end:{line:49,column:67}},"21":{start:{line:50,column:4},end:{line:50,column:82}},"22":{start:{line:50,column:21},end:{line:50,column:82}},"23":{start:{line:52,column:4},end:{line:52,column:74}},"24":{start:{line:58,column:15},end:{line:58,column:48}},"25":{start:{line:60,column:4},end:{line:60,column:68}},"26":{start:{line:66,column:23},end:{line:70,column:9}},"27":{start:{line:71,column:4},end:{line:71,column:84}},"28":{start:{line:71,column:20},end:{line:71,column:84}},"29":{start:{line:73,column:12},end:{line:73,column:81}},"30":{start:{line:79,column:19},end:{line:79,column:53}},"31":{start:{line:81,column:4},end:{line:81,column:78}},"32":{start:{line:81,column:16},end:{line:81,column:78}},"33":{start:{line:83,column:4},end:{line:83,column:75}},"34":{start:{line:86,column:0},end:{line:87,column:44}}},fnMap:{"0":{name:"newUser",decl:{start:{line:10,column:15},end:{line:10,column:22}},loc:{start:{line:10,column:32},end:{line:20,column:1}},line:10},"1":{name:"LoginUser",decl:{start:{line:23,column:15},end:{line:23,column:24}},loc:{start:{line:23,column:34},end:{line:35,column:1}},line:23},"2":{name:"showUserList",decl:{start:{line:39,column:15},end:{line:39,column:27}},loc:{start:{line:39,column:37},end:{line:44,column:1}},line:39},"3":{name:"deleteUser",decl:{start:{line:48,column:15},end:{line:48,column:25}},loc:{start:{line:48,column:35},end:{line:53,column:1}},line:48},"4":{name:"currentUser",decl:{start:{line:57,column:15},end:{line:57,column:26}},loc:{start:{line:57,column:36},end:{line:61,column:1}},line:57},"5":{name:"updateUser",decl:{start:{line:65,column:15},end:{line:65,column:25}},loc:{start:{line:65,column:35},end:{line:74,column:1}},line:65},"6":{name:"showUserById",decl:{start:{line:78,column:15},end:{line:78,column:27}},loc:{start:{line:78,column:37},end:{line:84,column:1}},line:78}},branchMap:{"0":{loc:{start:{line:13,column:4},end:{line:13,column:84}},type:"if",locations:[{start:{line:13,column:4},end:{line:13,column:84}},{start:{line:13,column:4},end:{line:13,column:84}}],line:13},"1":{loc:{start:{line:26,column:3},end:{line:26,column:85}},type:"if",locations:[{start:{line:26,column:3},end:{line:26,column:85}},{start:{line:26,column:3},end:{line:26,column:85}}],line:26},"2":{loc:{start:{line:30,column:3},end:{line:30,column:81}},type:"if",locations:[{start:{line:30,column:3},end:{line:30,column:81}},{start:{line:30,column:3},end:{line:30,column:81}}],line:30},"3":{loc:{start:{line:50,column:4},end:{line:50,column:82}},type:"if",locations:[{start:{line:50,column:4},end:{line:50,column:82}},{start:{line:50,column:4},end:{line:50,column:82}}],line:50},"4":{loc:{start:{line:71,column:4},end:{line:71,column:84}},type:"if",locations:[{start:{line:71,column:4},end:{line:71,column:84}},{start:{line:71,column:4},end:{line:71,column:84}}],line:71},"5":{loc:{start:{line:81,column:4},end:{line:81,column:78}},type:"if",locations:[{start:{line:81,column:4},end:{line:81,column:78}},{start:{line:81,column:4},end:{line:81,column:78}}],line:81}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0]},_coverageSchema:"43e27e138ebf9cfc5966b082cf9a028302ed4184",hash:"c250ab8ccaf6e81960e2bc5135f3a66809a97042"};var coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}return coverage[path]=coverageData;}();const User=(cov_1v4wqmvcmv.s[0]++,require('./../models/user'));const{success,errorMessage}=(cov_1v4wqmvcmv.s[1]++,require('../helper/response'));// pick the variables we need
const _=(cov_1v4wqmvcmv.s[2]++,require('lodash'));// encrypt the password
const bcrypt=(cov_1v4wqmvcmv.s[3]++,require('bcryptjs'));// 1. Register New User Function
async function newUser(req,res){cov_1v4wqmvcmv.f[0]++;// to check if email already register
let user=(cov_1v4wqmvcmv.s[4]++,await User.findOne({email:req.body.email}));cov_1v4wqmvcmv.s[5]++;if(user){cov_1v4wqmvcmv.b[0][0]++;cov_1v4wqmvcmv.s[6]++;return res.status(422).send(errorMessage('User already Registered.'));}else{cov_1v4wqmvcmv.b[0][1]++;}// create new user
cov_1v4wqmvcmv.s[7]++;user=new User({name:req.body.name,email:req.body.email,password:req.body.password});// save the User
const result=(cov_1v4wqmvcmv.s[8]++,await user.save());// response or output from function    
cov_1v4wqmvcmv.s[9]++;res.status(200).json(success(result,"yeay! you are successfully register!"));}// 2. Login User Function
async function LoginUser(req,res){cov_1v4wqmvcmv.f[1]++;// check if email are not register
let user=(cov_1v4wqmvcmv.s[10]++,await User.findOne({email:req.body.email}));cov_1v4wqmvcmv.s[11]++;if(!user){cov_1v4wqmvcmv.b[1][0]++;cov_1v4wqmvcmv.s[12]++;return res.status(421).json(errorMessage('Email are not Registered!'));}else{cov_1v4wqmvcmv.b[1][1]++;}// check if the password that store in DB same with the User input
const validPassword=(cov_1v4wqmvcmv.s[13]++,await bcrypt.compare(req.body.password,user.password));cov_1v4wqmvcmv.s[14]++;if(!validPassword){cov_1v4wqmvcmv.b[2][0]++;cov_1v4wqmvcmv.s[15]++;return res.status(422).json(errorMessage("wrong password"));}else{cov_1v4wqmvcmv.b[2][1]++;}// generate json Token
const token=(cov_1v4wqmvcmv.s[16]++,user.generateAuthToken());cov_1v4wqmvcmv.s[17]++;res.status(200).json(success({token},"successfully login"));}// 3. get the User List
async function showUserList(req,res){cov_1v4wqmvcmv.f[2]++;let userList=(cov_1v4wqmvcmv.s[18]++,await User.find({}));cov_1v4wqmvcmv.s[19]++;res.status(200).json(success(userList,"here is your user list"));}// 4. Delete User by Id
async function deleteUser(req,res){cov_1v4wqmvcmv.f[3]++;const delete_user=(cov_1v4wqmvcmv.s[20]++,await User.findByIdAndDelete(req.params.id));cov_1v4wqmvcmv.s[21]++;if(!delete_user){cov_1v4wqmvcmv.b[3][0]++;cov_1v4wqmvcmv.s[22]++;return res.status(422).json(errorMessage("cannot find user"));}else{cov_1v4wqmvcmv.b[3][1]++;}cov_1v4wqmvcmv.s[23]++;res.status(200).json(success(delete_user,"successfully delete user"));}// 5. Current User Profile
async function currentUser(req,res){cov_1v4wqmvcmv.f[4]++;let user=(cov_1v4wqmvcmv.s[24]++,await User.findById(req.user._id));cov_1v4wqmvcmv.s[25]++;res.status(200).json(success(user,"user detail information: "));}//  6. Update User Profile
async function updateUser(req,res){cov_1v4wqmvcmv.f[5]++;const userUpdate=(cov_1v4wqmvcmv.s[26]++,await User.findByIdAndUpdate(req.user._id,{$set:{name:req.body.name,email:req.body.email}},{new:true}));cov_1v4wqmvcmv.s[27]++;if(!userUpdate){cov_1v4wqmvcmv.b[4][0]++;cov_1v4wqmvcmv.s[28]++;return res.status(422).json(errorMessage("failed update user"));}else{cov_1v4wqmvcmv.b[4][1]++;}cov_1v4wqmvcmv.s[29]++;res.status(200).json(success(userUpdate,"successfully Update User"));}// 7. Show User By Id
async function showUserById(req,res){cov_1v4wqmvcmv.f[6]++;const userId=(cov_1v4wqmvcmv.s[30]++,await User.findById(req.params.id));// if invalid id
cov_1v4wqmvcmv.s[31]++;if(!userId){cov_1v4wqmvcmv.b[5][0]++;cov_1v4wqmvcmv.s[32]++;return res.status(422).json(errorMessage("cannot find User"));}else{cov_1v4wqmvcmv.b[5][1]++;}cov_1v4wqmvcmv.s[33]++;res.status(200).json(success(userId,"here is the user Information: "));}cov_1v4wqmvcmv.s[34]++;module.exports={newUser,LoginUser,showUserList,deleteUser,currentUser,updateUser,showUserById};